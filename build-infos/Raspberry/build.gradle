plugins {
    id 'application'
    id "org.openjfx.javafxplugin" version "0.1.0"
    id "org.beryx.runtime" version "1.13.1"
}
javafx {
    version = "20.0.1"
    modules = ['javafx.controls']
}
repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

def programName = 'MTPlayer'
def jarName = 'MTPlayer.jar'
def theMainClass = 'de/p2tools/mtplayer/Main'
def fatJarDir = layout.buildDirectory.get().toString() + "/fatJar" + "/"

// ===========================================
// build project
// ===========================================
group 'de.p2tools'
application {
    mainClass = theMainClass
}

dependencies {
    implementation ':commons-cli-1.9.0'
    implementation ':commons-io-2.17.0'
    implementation ':commons-lang3-3.17.0'

    implementation ':jackson-core-2.17.2'
    implementation ':jackson-databind-2.17.2'
    implementation ':jackson-annotations-2.17.2'

    implementation ':xz-1.10'
    implementation 'org.jsoup:jsoup:1.18.1'

    implementation("com.squareup.okhttp3:okhttp:4.12.0")

    implementation ':p2lib'
    implementation ':controlsfx-11.2.1'

    implementation "org.openjfx:javafx-fxml:20:linux-aarch64"
    implementation "org.openjfx:javafx-controls:20:linux-aarch64"
    implementation "org.openjfx:javafx-graphics:20:linux-aarch64"
    implementation "org.openjfx:javafx-base:20:linux-aarch64"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jar {
    manifest {
        attributes("Manifest-Version": "1.0",
                "Main-Class": theMainClass);
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
tasks.register('fatJar', Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest.from jar.manifest
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    destinationDirectory.set(file(fatJarDir))
    archiveFileName = jarName
    with jar
}

runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    modules = ['java.naming', 'java.xml']
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(Zip).configureEach { task ->
    task.doLast {
        //ant.checksum file: archiveFile.get().asFile
        ant.checksum(algorithm: 'SHA-512', file: archiveFile.get().asFile)
    }
}

