plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.26.0'
}
javafx {
    version = "19"
    modules = ['javafx.controls']
}
repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

//<><><><><><><><><><><><><><><><><><><><>
def programVersion = '16'
def programName = 'MTPlayer'
def jarName = 'MTPlayer.jar'
def theMainClass = 'de/p2tools/mtplayer/Main'
//<><><><><><><><><><><><><><><><><><><><>

mainClassName = 'Main'
application {
    mainClass = theMainClass
    mainModule = moduleName

    //<><><><><><><><><><><><><><><><><><><><>
    applicationDefaultJvmArgs = ['--module', 'mtplayer']
    //<><><><><><><><><><><><><><><><><><><><>
}


//===========================================================
def jre_linux = '../../ADMIN/JDK/jre_linux/'
def jre_windows = '../../ADMIN/JDK/jre_windows/'

def resDistAll = './res/res_all'
def resDistJdkLinux = './res/res_jdk_linux'
def resDistJdkWindows = './res/res_jdk_windows'

def propertyFile = "./src/main/resources/version.properties"
def fatJarDirName = "fatJar"
def fatJarDir = "$buildDir/" + fatJarDirName + "/"

def distDir = "./dist/"
def releaseDir = './release/'
def buildDir = "$buildDir/builds/"
def buildDir_All = buildDir + programName + "/"
def buldDir_Linux = buildDir + programName + "_mit_Java__Linux/"
def buldDir_Win = buildDir + programName + "_mit_Java__Win/"

def buildNo = loadProgProperties().getProperty('BUILD').toInteger()
def newDate = new Date().format('dd.MM.yyyy')

version = programVersion
group 'de.p2tools'
sourceCompatibility = '17'
targetCompatibility = '17'


// ===========================================
// build project
// ===========================================
dependencies {
    implementation project(':p2lib')

    implementation ':controlsfx-11.1.3'

    //<><><><><><><><><><><><><><><><><><><><>
    implementation ':commons-cli-1.5.0'
    implementation ':commons-io-2.12.0'
    implementation ':commons-lang3-3.12.0'
    implementation ':jackson-core-2.15.2'
    implementation ':xz-1.9'

    implementation ':okhttp-4.9.3'
    implementation ':okio-3.3.0'
    implementation ':okio-jvm-3.3.0'
    implementation ':kotlin-stdlib-1.8.21'
    //<><><><><><><><><><><><><><><><><><><><>

    implementation "org.openjfx:javafx-fxml:19:linux"
    implementation "org.openjfx:javafx-controls:19:linux"
    implementation "org.openjfx:javafx-graphics:19:linux"
    implementation "org.openjfx:javafx-base:19:linux"

    implementation "org.openjfx:javafx-fxml:19:win"
    implementation "org.openjfx:javafx-controls:19:win"
    implementation "org.openjfx:javafx-graphics:19:win"
    implementation "org.openjfx:javafx-base:19:win"

    implementation "org.openjfx:javafx-fxml:19:mac"
    implementation "org.openjfx:javafx-controls:19:mac"
    implementation "org.openjfx:javafx-graphics:19:mac"
    implementation "org.openjfx:javafx-base:19:mac"
}


jlink {
    imageZip = project.file("${buildDir}/distributions/lx.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = programName
    }
}
ext.sharedManifest = manifest {
    attributes 'Main-Class': theMainClass
}
jar {
    dependsOn ":p2lib:jar"
    libsDirName = fatJarDirName
    manifest = project.manifest {
        from sharedManifest
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    archiveFileName = jarName
}


// ============================================
//all
// ============================================
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Zip) { task ->
    task.doLast {
        ant.checksum(algorithm: 'SHA-512', file: it.archivePath)
    }
}

tasks.register('updateDate') {
    // und nur dann speichern
    ant.propertyfile(file: propertyFile) {
        entry(key: "VERSION", value: version)
        entry(key: "BUILD", value: buildNo)
        entry(key: "DATE", value: newDate)
    }
    println("")
    println("= updateProjectInfos =============================")
    println("VERSION: " + version)
    println("Build: $buildNo")
    println("DATE: $newDate")
    println("========================================")
    println("")
}

tasks.register('cleanDist', Delete) {
    delete distDir
    delete releaseDir
}
clean.dependsOn cleanDist, updateDate

tasks.register('updateProjectInfos') {
    doLast {
        // und nur dann speichern
        ant.propertyfile(file: propertyFile) {
            entry(key: "VERSION", value: version)
            entry(key: "BUILD", value: buildNo + 1)
            entry(key: "DATE", value: newDate)
        }
        println("")
        println("= updateProjectInfos =============================")
        println("VERSION: " + version)
        println("Build: $buildNo")
        println("DATE: $newDate")
        println("========================================")
        println("")
    }
}

def loadProgProperties() {
    Properties props = new Properties()
    file('src/main/resources/version.properties').withInputStream {
        props.load(it)
    }
    return props
}

tasks.register('dist') {
    dependsOn clean, jlinkZip
}
defaultTasks 'dist'


// ============================================
// build dist dir and zipfile
// ============================================
tasks.register('copyAll1', Copy) {
    //copy the resources
    dependsOn jar
    from(resDistAll)
    from file(fatJarDir + jarName)
    into file(buildDir_All)
}
tasks.register('copyAll2', Copy) {
    //copy the info files
    dependsOn copyAll1
    from file(propertyFile)
    into file(buildDir_All + "Info")
    rename("version.properties", "version.txt")
}
tasks.register('copyAll3', Copy) {
    //copy to the distDir
    dependsOn copyAll2
    from file(buildDir_All)
    into file(distDir)
}
tasks.register('buildZip_all', Zip) {
    dependsOn clean, copyAll3
    //def newBuild = loadProgProperties().getProperty('BUILD').toInteger() + 1
    destinationDirectory = layout.projectDirectory.dir(releaseDir)
    from layout.projectDirectory.dir(buildDir_All)
    into programName
    archiveFileName = programName + '-' + programVersion + '-' + buildNo + '__' + new Date().format('yyyy.MM.dd') + '.zip'
}


// ============================================
// build jre linux and zipfile
// ============================================
tasks.register('copyLinux1', Copy) {
    //copy the runtime
    dependsOn buildZip_all
    from(jre_linux) {}
    into file(buldDir_Linux + "Java")
}
tasks.register('copyLinux2', Copy) {
    //copy the resources
    dependsOn copyLinux1
    from(resDistAll) {
        exclude '**/*.exe'
    }
    from(resDistJdkLinux)
    from file(fatJarDir + jarName)
    into file(buldDir_Linux)
}
tasks.register('copyLinux3', Copy) {
    //copy the info files
    dependsOn copyLinux2
    from file(propertyFile)
    into file(buldDir_Linux + "Info")
    rename("version.properties", "version.txt")
}
tasks.register('buildZip_linux', Zip) {
    dependsOn copyLinux3
    archiveFileName = programName + '-' + programVersion + '-' + buildNo + '__Linux=mit=Java__' + new Date().format('yyyy.MM.dd') + '.zip'
    destinationDirectory = file(releaseDir)
    from fileTree(buldDir_Linux) {
        into programName + "__Linux+Java"
    }
}

// ============================================
// build jre windows and zipfile
// ============================================
tasks.register('copyWindows1', Copy) {
    //copy the runtime
    dependsOn buildZip_all
    from(jre_windows)
    into file(buldDir_Win + "Java")
}
tasks.register('copyWindows2', Copy) {
    //copy the resources
    dependsOn copyWindows1
    from(resDistAll) {
        exclude '**/*.sh'
    }
    from(resDistJdkWindows)
    from file(fatJarDir + jarName)
    into file(buldDir_Win)
}
tasks.register('copyWindows3', Copy) {
    //copy the info files
    dependsOn copyWindows2
    from file(propertyFile)
    into file(buldDir_Win + "Info")
    rename("version.properties", "version.txt")
}
tasks.register('buildZip_windows', Zip) {
    dependsOn copyWindows3
    archiveFileName = programName + '-' + programVersion + '-' + buildNo + '__Windows=mit=Java__' + new Date().format('yyyy.MM.dd') + '.zip'
    destinationDirectory = file(releaseDir)
    from fileTree(buldDir_Win) {
        into programName + "__Windows+Java"
    }
}


// ============================================
// build
// ============================================
tasks.register('onlyDist') {
    //only the distDir
    dependsOn buildZip_all
}

tasks.register('jreDist') {
    //only the distDir
    dependsOn buildZip_all, buildZip_linux, buildZip_windows, updateProjectInfos
}
